import axios from 'axios';
import { ref as databaseRef, set, get } from 'firebase/database';
import { database } from '../../plugins/firebase';
import JSZip from 'jszip';
import { saveAs } from 'file-saver';
import * as pdfjsLib from 'pdfjs-dist';
import { PDFDocument } from 'pdf-lib';

const state = {
  uploadedFiles: [],
  uploadProgress: {},
  baseUrl: 'http://95.164.90.115:3000'
};

const mutations = {
  ADD_FILE(state, fileData) {
    console.log('üìÑ ADD_FILE –º—É—Ç–∞—Ü–∏—è:', { 
      –≤—Ö–æ–¥–Ω—ã–µ–î–∞–Ω–Ω—ã–µ: fileData,
      —Ç–µ–∫—É—â–∏–µ–§–∞–π–ª—ã: state.uploadedFiles 
    });

    if (!Array.isArray(state.uploadedFiles)) {
      state.uploadedFiles = [];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL
    if (!fileData.url) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞:', fileData);
      return;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL
    let fileUrl = fileData.url;
    if (fileUrl.includes('localhost:3000')) {
      fileUrl = fileUrl.replace('http://localhost:3000', state.baseUrl);
    }
    if (!fileUrl.startsWith('http')) {
      fileUrl = `${state.baseUrl}${fileUrl}`;
    }

    const newFile = {
      ...fileData,
      url: fileUrl
    };

    state.uploadedFiles.push(newFile);
    
    console.log('üìÑ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', { 
      –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π–§–∞–π–ª: newFile,
      –≤—Å–µ–§–∞–π–ª—ã: state.uploadedFiles 
    });
  },
  REMOVE_FILE(state, index) {
    state.uploadedFiles.splice(index, 1);
  },
  CLEAR_FILES(state) {
    state.uploadedFiles = [];
    state.uploadProgress = {};
  },
  SET_UPLOAD_PROGRESS(state, { fileName, progress }) {
    state.uploadProgress = {
      ...state.uploadProgress,
      [fileName]: progress
    };
  }
};

const actions = {
  validateFile({ commit }, file) {
    console.group('üìù –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞:', {
      name: file.name,
      type: file.type,
      size: `${(file.size / (1024 * 1024)).toFixed(2)} MB`
    });

    return new Promise((resolve, reject) => {
      const allowedTypes = [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.oasis.opendocument.text',
        'text/plain',
        'application/rtf',
        'text/rtf'
      ];
      
      const allowedExtensions = ['.pdf', '.doc', '.docx', '.odt', '.txt', '.rtf'];
      const fileName = file.name.toLowerCase();
      const fileExtension = fileName.slice(fileName.lastIndexOf('.'));
      const hasValidExtension = allowedExtensions.includes(fileExtension);
      
      console.log('üìë –î–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', {
        fileName,
        fileExtension,
        hasValidExtension,
        isTypeAllowed: allowedTypes.includes(file.type)
      });
      
      if (!allowedTypes.includes(file.type) && !hasValidExtension) {
        const error = new Error('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã DOC, DOCX, PDF, TXT, RTF –∏ ODT');
        console.error('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', {
          type: file.type,
          extension: fileExtension,
          error: error.message
        });
        console.groupEnd();
        reject(error);
        return;
      }
      
      if (fileExtension === '.rtf' && !file.type.includes('rtf')) {
        console.log('‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MIME-—Ç–∏–ø –¥–ª—è RTF —Ñ–∞–π–ª–∞:', {
          originalType: file.type,
          newType: 'application/rtf'
        });
        file = new File([file], file.name, { type: 'application/rtf' });
      }
      
      console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');
      console.groupEnd();
      resolve(file);
    });
  },

  validateFileSize({ commit }, file) {
    console.group('üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞');
    return new Promise((resolve, reject) => {
      const maxSize = 20 * 1024 * 1024; // 20MB
      if (file.size > maxSize) {
        const error = new Error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20MB');
        console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', {
          actualSize: `${(file.size / (1024 * 1024)).toFixed(2)} MB`,
          maxAllowedSize: '20 MB',
          error: error.message
        });
        console.groupEnd();
        reject(error);
        return;
      }
      console.log('‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã:', {
        actualSize: `${(file.size / (1024 * 1024)).toFixed(2)} MB`,
        maxAllowedSize: '20 MB'
      });
      console.groupEnd();
      resolve(file);
    });
  },

  async compressFile({ commit, dispatch }, file) {
    console.group('üóúÔ∏è –°–∂–∞—Ç–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    try {
      console.log('üìÑ –ù–∞—á–∞–ª–æ —Å–∂–∞—Ç–∏—è —Ñ–∞–π–ª–∞:', {
        name: file.name,
        type: file.type,
        size: `${(file.size / (1024 * 1024)).toFixed(2)} MB`,
        lastModified: new Date(file.lastModified).toLocaleString()
      });

      if (file.size < 1024 * 1024) {
        console.log('‚ú® –§–∞–π–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π, —Å–∂–∞—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è:', {
          size: `${(file.size / 1024).toFixed(2)} KB`,
          threshold: '1 MB'
        });
        return file;
      }

      let compressedFile;
      console.log('üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —Å–∂–∞—Ç–∏—è –¥–ª—è —Ç–∏–ø–∞:', file.type);

      switch (file.type) {
        case 'application/pdf':
          console.log('üìå –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è PDF');
          compressedFile = await dispatch('compressPDF', file);
          break;

        case 'application/msword':
        case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
        case 'application/vnd.oasis.opendocument.text':
        case 'application/rtf':
        case 'text/rtf':
          console.log('üìå –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
          compressedFile = await dispatch('compressTextBasedDoc', file);
          break;

        case 'text/plain':
          console.log('üìå –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞');
          compressedFile = await dispatch('compressTextFile', file);
          break;

        default:
          console.log('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∂–∞—Ç–∏—è:', file.type);
          return file;
      }

      if (!compressedFile || compressedFile.size >= file.size) {
        console.log('‚ö†Ô∏è –°–∂–∞—Ç—ã–π —Ñ–∞–π–ª –±–æ–ª—å—à–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏–ª–∏ —Å–∂–∞—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', {
          originalSize: `${(file.size / 1024).toFixed(2)} KB`,
          compressedSize: compressedFile ? `${(compressedFile.size / 1024).toFixed(2)} KB` : 'N/A'
        });
        return file;
      }

      const compressionStats = {
        originalSize: `${(file.size / 1024).toFixed(2)} KB`,
        compressedSize: `${(compressedFile.size / 1024).toFixed(2)} KB`,
        reduction: `${((1 - compressedFile.size / file.size) * 100).toFixed(1)}%`,
        method: file.type === 'application/pdf' ? 'PDF Compression' : 'Text Compression'
      };

      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∂–∞—Ç–∏—è:', compressionStats);
      return compressedFile;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ —Ñ–∞–π–ª–∞:', {
        error: error.message,
        stack: error.stack,
        fileName: file.name,
        fileType: file.type
      });
      return file;
    } finally {
      console.groupEnd();
    }
  },

  async compressPDF({ commit }, file) {
    console.group('üìÑ –°–∂–∞—Ç–∏–µ PDF —Ñ–∞–π–ª–∞');
    try {
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ ArrayBuffer
      const arrayBuffer = await file.arrayBuffer();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
      const pdfDoc = await PDFDocument.load(arrayBuffer, {
        updateMetadata: false // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pages = pdfDoc.getPages();
      console.log(`üìë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ PDF: ${pages.length}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—è
      const compressedPdfBytes = await pdfDoc.save({
        useObjectStreams: true, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        addDefaultPage: false, // –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        useCompression: true, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∂–∞—Ç–∏–µ
        preserveCollectedStreams: false, // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        removeUnusedObjects: true, // –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
        compressContentStreams: true // –°–∂–∏–º–∞—Ç—å –ø–æ—Ç–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      });
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π File –æ–±—ä–µ–∫—Ç
      const compressedFile = new File([compressedPdfBytes], file.name, { type: 'application/pdf' });
      
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∂–∞—Ç–∏—è:', {
        originalSize: `${(file.size / 1024).toFixed(2)} KB`,
        compressedSize: `${(compressedFile.size / 1024).toFixed(2)} KB`,
        reduction: `${((1 - compressedFile.size / file.size) * 100).toFixed(1)}%`
      });
      
      return compressedFile;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ PDF:', {
        error: error.message,
        stack: error.stack,
        fileName: file.name
      });
      return null;
    } finally {
      console.groupEnd();
    }
  },

  async compressTextBasedDoc({ commit }, file) {
    try {
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ ArrayBuffer
      const arrayBuffer = await file.arrayBuffer();
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      let text;
      try {
        text = new TextDecoder().decode(arrayBuffer);
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª');
        return file;
      }
      
      // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      const compressedText = text
        .replace(/\s+/g, ' ')
        .replace(/\n\s*/g, '\n')
        .trim();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
      return new File([compressedText], file.name, { type: file.type });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', {
        error: error.message,
        stack: error.stack,
        fileName: file.name
      });
      return file;
    }
  },

  async compressTextFile({ commit }, file) {
    try {
      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
      const text = await file.text();
      
      // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      const compressedText = text
        .replace(/\s+/g, ' ')
        .replace(/\n\s*/g, '\n')
        .trim();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
      return new File([compressedText], file.name, { type: file.type });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:', {
        error: error.message,
        stack: error.stack,
        fileName: file.name
      });
      return file;
    }
  },

  async uploadFile({ commit, dispatch }, file) {
    console.group('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    try {
      console.log('üîç –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ:', {
        fileName: file.name,
        fileType: file.type,
        fileSize: `${(file.size / (1024 * 1024)).toFixed(2)} MB`
      });

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      console.log('‚ú® –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞');
      await dispatch('validateFile', file);
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —É—Å–ø–µ—à–Ω–∞');

      // –ó–∞—Ç–µ–º —Å–∂–∏–º–∞–µ–º —Ñ–∞–π–ª
      console.log('üóúÔ∏è –ù–∞—á–∞–ª–æ —Å–∂–∞—Ç–∏—è —Ñ–∞–π–ª–∞');
      const compressedFile = await dispatch('compressFile', file);
      console.log('‚úÖ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
        originalSize: `${(file.size / (1024 * 1024)).toFixed(2)} MB`,
        compressedSize: `${(compressedFile.size / (1024 * 1024)).toFixed(2)} MB`
      });

      // –ü–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
      console.log('üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞');
      await dispatch('validateFileSize', compressedFile);
      console.log('‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ–ø—É—Å—Ç–∏–º');

      const formData = new FormData();
      formData.append('file', compressedFile);

      console.log('üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData:', {
        fileName: compressedFile.name,
        fileType: compressedFile.type,
        fileSize: `${(compressedFile.size / (1024 * 1024)).toFixed(2)} MB`
      });

      const url = `${state.baseUrl}/upload`;
      console.log('üåê URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', url);

      const response = await axios.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: ${progress}%`);
          commit('SET_UPLOAD_PROGRESS', { fileName: compressedFile.name, progress });
        }
      });

      console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
        status: response.status,
        statusText: response.statusText,
        data: response.data
      });

      if (response.status === 200 && response.data.fileUrl) {
        const fileData = {
          name: compressedFile.name,
          type: compressedFile.type,
          url: response.data.fileUrl,
          size: `${(compressedFile.size / (1024 * 1024)).toFixed(2)} MB`
        };

        console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', fileData);
        commit('ADD_FILE', fileData);
        
        return { 
          success: true, 
          message: `‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${compressedFile.name}` 
        };
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ñ–∞–π–ª–∞');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', {
        error: error.message,
        stack: error.stack,
        response: error.response?.data
      });
      
      return { 
        success: false, 
        message: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞'
      };
    } finally {
      console.groupEnd();
    }
  },

  async uploadMultipleFiles({ dispatch }, files) {
    return Promise.all(files.map(file => dispatch('uploadFile', file)));
  },

  async removeFile({ commit, state }, index) {
    try {
      const file = state.uploadedFiles[index];
      if (!file) {
        throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      
      commit('REMOVE_FILE', index);
      return { success: true, message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', {
        error: error.message,
        stack: error.stack
      });
      return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞' };
    }
  },

  clearFiles({ commit }) {
    commit('CLEAR_FILES');
  }
};

const getters = {
  getUploadedFiles: (state) => state.uploadedFiles,
  getUploadProgress: (state) => state.uploadProgress
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters
};